name: Reusable - Build and Deploy to Cloud Run

on:
  workflow_call:
    inputs:
      service:
        description: 'Service name'
        required: true
        type: string
      environment:
        description: 'Environment to deploy'
        required: true
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      REGION: us-central1
      ARTIFACT_REPOSITORY_ID: belay-on-artifacts

    steps:
      # 2️⃣ Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        # This makes your Dockerfile, source code, and any scripts available
        # on the GitHub runner. Needed for docker build.

      # 3️⃣ Authenticate to GCP
      - name: Auth gcloud
        id: auth
        uses: google-github-actions/auth@v3
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account: "infra-automation-global@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          workload_identity_provider: "projects/644009734493/locations/global/workloadIdentityPools/github/providers/github-repo-provider"
        # Prepares GCP auth for pushing images and deploying to Cloud Run.
        # Dockerfile not used yet.

      # 4️⃣ Docker login
      - name: Docker Auth
        uses: docker/login-action@v3
        with:
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.auth_token }}
          registry: ${{ env.REGION }}-docker.pkg.${{ inputs.environment }}
        # Logs into the container registry. Prepares for pushing the image built from the Dockerfile.

      # 5️⃣ Build and push the container image
      - name: Build and Push Container
        run: |
          # ======== Set variables ========
          # REGION="${{ env.REGION }}"
          # PROJECT="${{ secrets.GCP_PROJECT_ID }}"
          # REPO="${{ env.ARTIFACT_REPOSITORY_ID }}"
          # SERVICE="${{ inputs.service }}"
          # ENVIRONMENT="${{ inputs.environment }}"
          # Construct the full image URI including registry, project, repository, service, and environment tag
          IMAGE_URI="${{ env.REGION }}-docker.pkg.${{ inputs.environment }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPOSITORY_ID }}/${{ inputs.service }}:${{ inputs.environment }}"
          echo "IMAGE_URI=$IMAGE_URI"

          # ===== Dockerfile is USED HERE =====
          # 'docker build -t ... .' reads the Dockerfile in the current directory
          # and builds the container image with everything defined in it
          docker build -t "$IMAGE_URI" .

          # Push the built image to your Artifact Registry
          docker push "$IMAGE_URI"

      # 6️⃣ Deploy to Cloud Run
      - name: Deploy to Cloud Run
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.environment == 'dev') ||
          (github.event_name == 'workflow_dispatch' && inputs.environment != 'dev')
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: "${{ inputs.service }}-${{ inputs.environment }}"
          region: ${{ env.REGION }}
          # Uses the image built from the Dockerfile above
          image: "${{ env.REGION }}-docker.pkg.${{ inputs.environment }}/${{ secrets.GCP_PROJECT_ID  }}/${{ env.ARTIFACT_REPOSITORY_ID }}/${{ inputs.service }}:${{ inputs.environment }}"
        # Cloud Run runs the container image. It doesn't see the Dockerfile directly,
        # but everything baked in the image (JDK, Spring Boot jar, Java agent, ports) comes from it.

      # 7️⃣ Show output
      - name: Show output
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.environment == 'dev') ||
          (github.event_name == 'workflow_dispatch' && inputs.environment != 'dev')
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}"
        # Just prints the deployed Cloud Run URL. Dockerfile not used here.


